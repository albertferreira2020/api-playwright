import { chromium } from 'playwright';
import fs from 'fs';
import path from 'path';

const waitForGoogleAccountSelection = async (page) => {
    console.log('    Aguardando p√°gina de sele√ß√£o de conta do Google...');

    // Aguardar carregamento b√°sico primeiro
    try {
        await page.waitForLoadState('domcontentloaded', { timeout: 15000 });
        console.log('    DOM b√°sico carregado');
    } catch (error) {
        console.log('    Timeout no carregamento do DOM');
    }

    // Verificar qual tipo de p√°gina do Google estamos
    const url = page.url();
    console.log(`    URL atual: ${url}`);

    // Detectar se √© p√°gina de login (inserir email) vs p√°gina de sele√ß√£o de conta
    const isLoginPage = url.includes('signin/identifier') || url.includes('signin/v2/identifier');
    const isAccountSelectionPage = url.includes('selectaccount') || url.includes('oauth/selectaccount');

    if (isLoginPage) {
        console.log('    Detectada p√°gina de LOGIN (inserir email)');
        // Aguardar elementos de input de email
        const loginSelectors = [
            'input[type="email"]',
            'input[id="identifierId"]',
            '#identifierId',
            'input[name="identifier"]',
            '[data-initial-value]'
        ];

        for (const selector of loginSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 10000, state: 'visible' }); // Aumentado para 10 segundos
                console.log(`    Encontrado seletor de login: ${selector}`);
                break;
            } catch (error) {
                console.log(`    Seletor de login ${selector} n√£o encontrado, tentando pr√≥ximo...`);
            }
        }
    } else if (isAccountSelectionPage) {
        console.log('    Detectada p√°gina de SELE√á√ÉO DE CONTA');
        // Aguardar elementos de sele√ß√£o de conta
        const selectionSelectors = [
            'div[data-email]',
            '[data-identifier]',
            'li[data-account-type]',
            '.LXRPh'
        ];

        for (const selector of selectionSelectors) {
            try {
                await page.waitForSelector(selector, { timeout: 10000, state: 'visible' }); // Aumentado para 10 segundos
                console.log(`    Encontrado seletor de sele√ß√£o: ${selector}`);
                break;
            } catch (error) {
                console.log(`    Seletor de sele√ß√£o ${selector} n√£o encontrado, tentando pr√≥ximo...`);
            }
        }
    } else {
        console.log('    Tipo de p√°gina n√£o identificado, tentando seletores gerais...');
        // Aguardar m√∫ltiplos indicadores que a p√°gina carregou
        const selectors = [
            'div[data-email]',
            '[data-identifier]',
            '.w6VTHd', // Classe comum em p√°ginas do Google
            '[role="button"]',
            '.VV3oRb', // Outro seletor comum
            '#headingText', // T√≠tulo da p√°gina do Google
            'form', // Qualquer formul√°rio
            '.LXRPh', // Container de contas
            'li[data-account-type]', // Items de conta
            '[jsname]', // Elementos com jsname (comum no Google)
            'input[type="email"]', // Campo de email
            '#identifierId' // ID espec√≠fico do campo de email
        ];

        let selectorFound = false;
        for (const selector of selectors) {
            try {
                await page.waitForSelector(selector, { timeout: 10000, state: 'visible' }); // Aumentado para 10 segundos
                console.log(`    Encontrado seletor: ${selector}`);
                selectorFound = true;
                break;
            } catch (error) {
                console.log(`    Seletor ${selector} n√£o encontrado, tentando pr√≥ximo...`);
            }
        }

        if (!selectorFound) {
            console.log('    Nenhum seletor espec√≠fico encontrado, tentando aguardar rede...');
        }
    }

    // Aguardar rede estabilizar com timeout maior
    try {
        await page.waitForLoadState('networkidle', { timeout: 30000 }); // Aumentado para 30 segundos
        console.log('    Rede estabilizada');
    } catch (error) {
        console.log('    Timeout aguardando rede estabilizar, continuando...');
    }

    // Aguardar um tempo adicional para JavaScript din√¢mico
    await new Promise(resolve => setTimeout(resolve, 8000)); // Aumentado para 8 segundos
    console.log('    Aguarda adicional conclu√≠da');

    // Debug: Verificar estrutura da p√°gina
    try {
        const title = await page.title();
        console.log(`    T√≠tulo da p√°gina: ${title}`);

        // Contar elementos comuns
        const divCount = await page.locator('div').count();
        const buttonCount = await page.locator('button').count();
        const inputCount = await page.locator('input').count();
        console.log(`    Elementos div: ${divCount}, buttons: ${buttonCount}, inputs: ${inputCount}`);

        // Verificar se h√° elementos com data-email (sele√ß√£o de conta)
        const emailElements = await page.locator('div[data-email]').count();
        console.log(`    Elementos com data-email: ${emailElements}`);

        // Verificar se h√° campo de email (p√°gina de login)
        const emailInputs = await page.locator('input[type="email"], #identifierId').count();
        console.log(`    Campos de email: ${emailInputs}`);

    } catch (debugError) {
        console.log(`    Erro no debug: ${debugError.message}`);
    }
};

const waitForSeconds = async (page, seconds) => {
    // Verificar se a p√°gina ainda est√° ativa antes de executar o wait
    if (page.isClosed()) {
        throw new Error('P√°gina foi fechada durante a opera√ß√£o de espera');
    }
    await page.waitForTimeout(seconds * 1000);
};

const getTodayDate = () => {
    const today = new Date();
    return today.toISOString().slice(0, 10); // yyyy-mm-dd
};

const captureDebugScreenshot = async (page, stepName, attempt = null) => {
    try {
        if (page.isClosed()) {
            console.log(`  ‚ö†Ô∏è P√°gina fechada, pulando screenshot: ${stepName}`);
            return null;
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const attemptSuffix = attempt ? `_tentativa_${attempt}` : '';
        const filename = `debug_${stepName}${attemptSuffix}_${timestamp}.jpg`;
        const screenshotPath = `/app/screenshots/${filename}`;

        console.log(`  üì∏ Iniciando captura de screenshot: ${filename}`);

        // Garantir que o diret√≥rio existe
        const screenshotDir = path.dirname(screenshotPath);
        if (!fs.existsSync(screenshotDir)) {
            console.log(`  üìÅ Criando diret√≥rio: ${screenshotDir}`);
            fs.mkdirSync(screenshotDir, { recursive: true });
        }

        // Capturar informa√ß√µes da p√°gina para debug
        try {
            const url = page.url();
            const title = await page.title();
            console.log(`  üìÑ P√°gina: ${title} - ${url}`);
        } catch (pageInfoError) {
            console.log(`  ‚ö†Ô∏è Erro ao obter info da p√°gina: ${pageInfoError.message}`);
        }

        await page.screenshot({
            path: screenshotPath,
            fullPage: true,
            type: 'jpeg',
            quality: 80
        });

        // Verificar se o arquivo foi criado
        if (fs.existsSync(screenshotPath)) {
            const stats = fs.statSync(screenshotPath);
            console.log(`  ‚úÖ Screenshot salvo: ${filename} (${(stats.size / 1024).toFixed(1)} KB)`);
        } else {
            console.log(`  ‚ùå Arquivo de screenshot n√£o foi criado: ${filename}`);
        }

        return filename;
    } catch (error) {
        console.log(`  ‚ùå Erro ao capturar screenshot '${stepName}': ${error.message}`);
        console.log(`  Stack trace: ${error.stack}`);
        return null;
    }
};

const ensureActivePage = async (context, currentPage) => {
    if (!currentPage.isClosed()) {
        return currentPage;
    }

    console.log('  P√°gina atual foi fechada, procurando p√°gina ativa...');
    const availablePages = context.pages().filter(p => !p.isClosed());

    if (availablePages.length === 0) {
        throw new Error('Nenhuma p√°gina ativa dispon√≠vel');
    }

    const newPage = availablePages[availablePages.length - 1];
    newPage.setDefaultTimeout(0);
    newPage.setDefaultNavigationTimeout(0);
    console.log('  Alternado para p√°gina ativa');
    return newPage;
};

export const executarScraper = async ({ url, actions }) => {
    console.log('Iniciando execu√ß√£o do scraper...');
    console.log(`URL inicial: ${url}`);
    console.log(`Total de a√ß√µes: ${actions.length}`);

    const browser = await chromium.launch({
        headless: true,
        timeout: 0, // Remove timeout do browser
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--no-first-run',
            '--no-zygote',
            '--single-process',
            '--disable-web-security',
            '--disable-popup-blocking', // Permitir popups
            '--disable-features=VizDisplayCompositor',
            '--allow-running-insecure-content',
            '--disable-extensions-file-access-check',
            '--disable-ipc-flooding-protection',
            // Par√¢metros para contornar bloqueios por IP e detec√ß√£o
            '--disable-blink-features=AutomationControlled',
            '--disable-features=VizDisplayCompositor,VizServiceDisplayCompositor',
            '--disable-background-timer-throttling',
            '--disable-backgrounding-occluded-windows',
            '--disable-renderer-backgrounding',
            '--disable-features=TranslateUI',
            '--disable-component-extensions-with-background-pages',
            '--disable-default-apps',
            '--mute-audio',
            '--no-default-browser-check',
            '--autoplay-policy=user-gesture-required',
            '--disable-background-networking',
            '--disable-background-media-downloading',
            '--disable-client-side-phishing-detection',
            '--disable-component-update',
            '--disable-domain-reliability',
            '--disable-features=AudioServiceOutOfProcess',
            '--disable-hang-monitor',
            '--disable-prompt-on-repost',
            '--disable-sync',
            '--disable-translate',
            '--disable-field-trial-config',
            '--disable-checking-optimization-guide-machine-learning-hints',
            '--disable-optimization-guide-model-downloading',
            '--force-color-profile=srgb',
            '--metrics-recording-only',
            '--use-mock-keychain',
            '--disable-accelerated-2d-canvas',
            '--disable-accelerated-jpeg-decoding',
            '--disable-accelerated-mjpeg-decode',
            '--disable-accelerated-video-decode',
            '--disable-accelerated-video-encode',
            '--disable-app-list-dismiss-on-blur',
            '--disable-audio-output',
            '--disable-breakpad',
            '--disable-canvas-aa',
            '--disable-2d-canvas-clip-aa',
            '--disable-gl-drawing-for-tests',
            '--disable-gl-extensions',
            '--disable-histogram-customizer',
            '--disable-in-process-stack-traces',
            '--disable-logging',
            '--disable-partial-raster',
            '--disable-threaded-animation',
            '--disable-threaded-scrolling',
            '--disable-checker-imaging',
            '--disable-new-content-rendering-timeout',
            '--disable-hosted-app-shim-creation',
            '--disable-add-to-shelf',
            '--disable-datasaver-prompt',
            '--disable-desktop-notifications',
            '--disable-device-discovery-notifications',
            '--disable-dinosaur-easter-egg',
            '--disable-extensions',
            '--disable-infobars',
            '--disable-notifications',
            '--disable-password-generation',
            '--disable-permissions-api',
            '--disable-plugins',
            '--disable-print-preview',
            '--disable-speech-api',
            '--hide-scrollbars',
            '--mute-audio',
            '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            '--lang=pt-BR',
            '--accept-lang=pt-BR,pt;q=0.9,en;q=0.8',
            // Configura√ß√µes espec√≠ficas para evitar detec√ß√£o de bot
            '--disable-automation',
            '--disable-features=VizDisplayCompositor',
            '--disable-default-apps',
            '--disable-extensions',
            '--disable-plugins',
            '--disable-save-password-bubble',
            '--disable-translate',
            '--disable-web-security',
            '--ignore-certificate-errors',
            '--ignore-ssl-errors',
            '--ignore-certificate-errors-spki-list',
            '--ignore-certificate-errors-spki-list',
            '--ignore-ssl-errors-spki-list'
        ]
    });
    console.log('Navegador iniciado');

    const context = await browser.newContext({
        timeout: 0, // Remove timeout do context
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        viewport: { width: 1920, height: 1080 },
        locale: 'pt-BR',
        ignoreHTTPSErrors: true,
        // Configura√ß√£o de geolocaliza√ß√£o para Belo Horizonte, MG
        geolocation: {
            latitude: -19.9167,
            longitude: -43.9345
        },
        permissions: ['geolocation'],
        // Headers adicionais para mascarar automa√ß√£o
        extraHTTPHeaders: {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
            'Accept-Encoding': 'gzip, deflate, br',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
            'Sec-Fetch-Dest': 'document',
            'Sec-Fetch-Mode': 'navigate',
            'Sec-Fetch-Site': 'none',
            'Sec-Fetch-User': '?1',
            'Cache-Control': 'max-age=0',
            'DNT': '1',
            'Sec-GPC': '1'
        },
        // Configura√ß√µes adicionais para mascarar automa√ß√£o
        javaScriptEnabled: true,
        acceptDownloads: false,
        colorScheme: 'light',
        reducedMotion: 'no-preference',
        forcedColors: 'none',
        strictSelectors: false
    });
    const page = await context.newPage();

    // Remove timeout de navega√ß√£o e a√ß√µes
    page.setDefaultTimeout(0);
    page.setDefaultNavigationTimeout(0);

    // Mascarar indicadores de automa√ß√£o
    await page.addInitScript(() => {
        // Remove a propriedade webdriver
        Object.defineProperty(navigator, 'webdriver', {
            get: () => undefined,
        });

        // Sobrescrever o Chrome runtime
        // eslint-disable-next-line no-undef
        window.chrome = {
            runtime: {},
        };

        // Mascarar outras propriedades de detec√ß√£o
        Object.defineProperty(navigator, 'plugins', {
            get: () => [1, 2, 3, 4, 5],
        });

        Object.defineProperty(navigator, 'languages', {
            get: () => ['pt-BR', 'pt', 'en'],
        });

        // Mascarar dimens√µes de tela
        // eslint-disable-next-line no-undef
        Object.defineProperty(screen, 'width', {
            get: () => 1920,
        });
        // eslint-disable-next-line no-undef
        Object.defineProperty(screen, 'height', {
            get: () => 1080,
        });

        // Remover indicadores de headless
        Object.defineProperty(navigator, 'maxTouchPoints', {
            get: () => 0,
        });

        // Adicionar timezone brasileiro
        Object.defineProperty(Intl.DateTimeFormat.prototype, 'resolvedOptions', {
            value: function () {
                return {
                    ...this.constructor.prototype.resolvedOptions.call(this),
                    timeZone: 'America/Sao_Paulo'
                };
            }
        });

        // Simular conex√£o de internet real
        Object.defineProperty(navigator, 'connection', {
            get: () => ({
                effectiveType: '4g',
                downlink: 10,
                rtt: 50,
                saveData: false
            }),
        });

        // Configurar fuso hor√°rio
        try {
            Object.defineProperty(Date.prototype, 'getTimezoneOffset', {
                value: () => 180 // UTC-3 (Bras√≠lia)
            });
        } catch (e) {
            // Ignorar erros de configura√ß√£o de timezone
            console.log('Erro ao configurar timezone:', e);
        }
    });

    console.log('Nova p√°gina criada');

    let originalPage = page;
    let currentPage = page;

    try {
        console.log(`Navegando para: ${url}`);
        await page.goto(url, { waitUntil: 'networkidle' });
        console.log('P√°gina carregada com sucesso');

        for (let i = 0; i < actions.length; i++) {
            const action = actions[i];
            console.log(`\nExecutando a√ß√£o ${i + 1}/${actions.length}: ${action.type}`);

            try {
                // Verificar se a p√°gina ainda est√° ativa antes de cada a√ß√£o
                if (currentPage.isClosed()) {
                    throw new Error(`P√°gina atual foi fechada antes da a√ß√£o ${i + 1} (${action.type})`);
                }

                // Verificar se o contexto ainda est√° ativo
                if (context.pages().length === 0) {
                    throw new Error(`Todas as p√°ginas do contexto foram fechadas antes da a√ß√£o ${i + 1} (${action.type})`);
                }

                // Para a√ß√µes que podem causar navega√ß√£o, aguardar um pouco para estabilizar
                if (['click', 'goto'].includes(action.type)) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }

                // NOVA VERIFICA√á√ÉO: Aguardar estabiliza√ß√£o da p√°gina antes de executar a√ß√£o
                try {
                    const currentUrl = currentPage.url();
                    console.log(`  URL atual antes da a√ß√£o: ${currentUrl}`);

                    // Se estamos numa p√°gina do Google, aguardar carregamento extra
                    if (currentUrl.includes('accounts.google.com')) {
                        console.log('  Detectado Google - aguardando estabiliza√ß√£o extra...');
                        await new Promise(resolve => setTimeout(resolve, 3000));

                        // Verificar se a p√°gina mudou durante a espera
                        const newUrl = currentPage.url();
                        if (newUrl !== currentUrl) {
                            console.log(`  URL mudou durante espera: ${currentUrl} -> ${newUrl}`);
                            // Aguardar mais um pouco para a nova p√°gina estabilizar
                            await new Promise(resolve => setTimeout(resolve, 5000));
                        }
                    }
                } catch (urlError) {
                    console.log(`  Erro ao verificar URL: ${urlError.message}`);
                }

                // Configurar listener para popups se a pr√≥xima a√ß√£o for switchToPopup
                let popupListener = null;
                let pendingPopup = null;
                if (i < actions.length - 1 && actions[i + 1].type === 'switchToPopup') {
                    console.log('  Configurando listener para popup (pr√≥xima a√ß√£o)...');
                    popupListener = (page) => {
                        console.log(`  Popup detectado antecipadamente: ${page.url()}`);
                        if (!pendingPopup) {
                            pendingPopup = page;
                        }
                    };
                    context.on('page', popupListener);
                }

                // Para a√ß√µes ap√≥s switchToPopup, aguardar mais tempo para o DOM carregar
                if (i > 0 && actions[i - 1].type === 'switchToPopup') {
                    console.log('  Aguardando DOM estabilizar ap√≥s mudan√ßa de popup...');
                    await new Promise(resolve => setTimeout(resolve, 12000)); // Aumentado para 12 segundos

                    // Aguardar especificamente por p√°ginas do Google
                    const currentUrl = currentPage.url();
                    if (currentUrl.includes('accounts.google.com')) {
                        console.log('  Detectado popup do Google - aguardando carregamento espec√≠fico...');
                        await waitForGoogleAccountSelection(currentPage);
                    }

                    // Se a pr√≥xima a√ß√£o √© um clique, verificar se o elemento j√° est√° dispon√≠vel
                    if (action.type === 'click') {
                        console.log('  Verificando se elemento estar√° dispon√≠vel ap√≥s popup...');
                        try {
                            await currentPage.waitForSelector(`xpath=${action.xpath}`, {
                                timeout: 20000, // Aumentado para 20 segundos
                                state: 'visible'
                            });
                            console.log('  Elemento j√° detectado e vis√≠vel');
                        } catch (elementError) {
                            console.log('  Elemento ainda n√£o vis√≠vel, continuando com tentativas...');

                            // Screenshot para debug quando elemento n√£o √© encontrado
                            await captureDebugScreenshot(currentPage, `elemento_nao_encontrado_apos_popup_acao_${i + 1}`);
                        }
                    }
                }

                switch (action.type) {
                    case 'goto':
                        console.log(`  Navegando para: ${action.url}`);

                        // Screenshot antes da navega√ß√£o
                        await captureDebugScreenshot(currentPage, `pre_goto_acao_${i + 1}`);

                        await currentPage.goto(action.url, { waitUntil: 'networkidle' });
                        console.log('  Navega√ß√£o conclu√≠da');

                        // Screenshot ap√≥s a navega√ß√£o
                        await captureDebugScreenshot(currentPage, `pos_goto_acao_${i + 1}`);

                        // Aguardar carregamento completo ap√≥s navega√ß√£o
                        await new Promise(resolve => setTimeout(resolve, 2000));

                        // Verificar se a p√°gina ainda est√° ativa ap√≥s navega√ß√£o
                        if (currentPage.isClosed()) {
                            console.log('  P√°gina foi fechada ap√≥s navega√ß√£o, tentando encontrar p√°gina ativa...');
                            const availablePages = context.pages().filter(p => !p.isClosed());
                            if (availablePages.length > 0) {
                                currentPage = availablePages[availablePages.length - 1];
                                currentPage.setDefaultTimeout(0);
                                currentPage.setDefaultNavigationTimeout(0);
                                console.log('  Alternado para p√°gina ativa');
                            } else {
                                throw new Error('Nenhuma p√°gina dispon√≠vel ap√≥s navega√ß√£o');
                            }
                        }
                        break;

                    case 'click': {
                        console.log(`  Clicando no elemento: ${action.xpath}`);

                        // Screenshot antes de qualquer tentativa de clique
                        await captureDebugScreenshot(currentPage, `pre_click_acao_${i + 1}`);

                        // NOVA VERIFICA√á√ÉO: Se estamos numa p√°gina do Google, aguardar poss√≠veis redirecionamentos
                        const initialUrl = currentPage.url();
                        if (initialUrl.includes('accounts.google.com')) {
                            console.log('  Detectado Google - verificando estabilidade da p√°gina...');

                            // Aguardar poss√≠veis redirecionamentos autom√°ticos
                            let urlStable = false;
                            let attempts = 0;
                            const maxAttempts = 10;

                            while (!urlStable && attempts < maxAttempts) {
                                const currentUrl = currentPage.url();
                                await new Promise(resolve => setTimeout(resolve, 1000));
                                const newUrl = currentPage.url();

                                if (currentUrl === newUrl) {
                                    urlStable = true;
                                    console.log(`  URL estabilizada: ${newUrl}`);
                                } else {
                                    console.log(`  URL mudou: ${currentUrl} -> ${newUrl}`);
                                    attempts++;
                                }
                            }

                            if (!urlStable) {
                                console.log('  URL n√£o estabilizou, continuando mesmo assim...');
                            }

                            // Screenshot ap√≥s verifica√ß√£o de estabilidade
                            await captureDebugScreenshot(currentPage, `pos_stability_check_acao_${i + 1}`);
                        }

                        let clickSuccess = false;
                        let attempts = 3;

                        while (attempts > 0 && !clickSuccess) {
                            try {
                                console.log(`  Tentativa ${4 - attempts}/3 de clique`);

                                // Screenshot da tentativa atual
                                await captureDebugScreenshot(currentPage, `click_acao_${i + 1}`, 4 - attempts);

                                // Aguardar um pouco antes de tentar localizar o elemento
                                await new Promise(resolve => setTimeout(resolve, 2000));

                                // Aguardar que o elemento esteja dispon√≠vel na p√°gina
                                console.log(`  Aguardando elemento ficar dispon√≠vel...`);

                                // Se estamos no Google, aguardar indicadores espec√≠ficos
                                if (currentPage.url().includes('accounts.google.com')) {
                                    console.log('  Detectado Google Accounts, aguardando carregamento espec√≠fico...');
                                    await waitForGoogleAccountSelection(currentPage);

                                    // Screenshot ap√≥s aguardar o Google
                                    await captureDebugScreenshot(currentPage, `pos_google_wait_acao_${i + 1}`, 4 - attempts);

                                    // NOVA L√ìGICA: Verificar se devemos pular para estrat√©gia de login
                                    const currentUrl = currentPage.url();
                                    const isLoginPage = currentUrl.includes('signin/identifier') || currentUrl.includes('signin/v2/identifier');

                                    if (isLoginPage && action.xpath.includes('data-email')) {
                                        console.log('  DETECTADO: P√°gina de login + a√ß√£o de sele√ß√£o de conta');
                                        console.log('  APLICANDO ESTRAT√âGIA DE LOGIN AUTOMATICAMENTE...');

                                        // Screenshot antes do login autom√°tico
                                        await captureDebugScreenshot(currentPage, `pre_auto_login_acao_${i + 1}`, 4 - attempts);

                                        try {
                                            const emailInput = await currentPage.locator('input[type="email"], #identifierId').first();
                                            if (await emailInput.count() > 0) {
                                                console.log('  Preenchendo campo de email no login...');
                                                await emailInput.fill('albert.ferreira@itlean.com.br');

                                                // Screenshot ap√≥s preencher email
                                                await captureDebugScreenshot(currentPage, `pos_fill_email_acao_${i + 1}`, 4 - attempts);

                                                // Aguardar um pouco
                                                await new Promise(resolve => setTimeout(resolve, 1000));

                                                // Procurar bot√£o "Pr√≥ximo" ou "Continuar"
                                                const nextButton = await currentPage.locator('button:has-text("Pr√≥ximo"), button:has-text("Next"), button:has-text("Continuar"), button[id*="next"], button[id*="Next"], [jsname="LgbsSe"], button[type="submit"], #identifierNext, [data-primary="true"]').first();
                                                if (await nextButton.count() > 0) {
                                                    console.log('  Clicando no bot√£o Pr√≥ximo...');

                                                    // Screenshot antes de clicar no bot√£o
                                                    await captureDebugScreenshot(currentPage, `pre_click_next_acao_${i + 1}`, 4 - attempts);

                                                    await nextButton.click();
                                                    clickSuccess = true;

                                                    console.log('  Login executado com sucesso via estrat√©gia autom√°tica!');

                                                    // Screenshot ap√≥s clicar no bot√£o
                                                    await captureDebugScreenshot(currentPage, `pos_click_next_acao_${i + 1}`, 4 - attempts);

                                                    // Aguardar navega√ß√£o
                                                    await new Promise(resolve => setTimeout(resolve, 5000));

                                                    // Screenshot ap√≥s aguardar navega√ß√£o
                                                    await captureDebugScreenshot(currentPage, `pos_navigation_acao_${i + 1}`, 4 - attempts);

                                                    // Verificar se chegamos na p√°gina de sele√ß√£o de conta ou senha
                                                    const newUrl = currentPage.url();
                                                    console.log(`  Nova URL ap√≥s inserir email: ${newUrl}`);

                                                    if (currentPage.isClosed()) {
                                                        console.log('  P√°gina foi fechada ap√≥s inserir email, procurando p√°gina ativa...');
                                                        const availablePages = context.pages().filter(p => !p.isClosed());
                                                        if (availablePages.length > 0) {
                                                            currentPage = availablePages[availablePages.length - 1];
                                                            currentPage.setDefaultTimeout(0);
                                                            currentPage.setDefaultNavigationTimeout(0);
                                                            console.log('  Alternado para p√°gina ativa');

                                                            // Screenshot da nova p√°gina ativa
                                                            await captureDebugScreenshot(currentPage, `nova_pagina_ativa_acao_${i + 1}`, 4 - attempts);
                                                        }
                                                    }

                                                    // IMPORTANTE: Sair do loop de tentativas j√° que o login foi bem-sucedido
                                                    attempts = 0; // For√ßa a sa√≠da do while loop
                                                } else {
                                                    console.log('  Bot√£o Pr√≥ximo n√£o encontrado');
                                                    // Screenshot quando bot√£o n√£o √© encontrado
                                                    await captureDebugScreenshot(currentPage, `botao_nao_encontrado_acao_${i + 1}`, 4 - attempts);
                                                }
                                            } else {
                                                console.log('  Campo de email n√£o encontrado');
                                                // Screenshot quando campo de email n√£o √© encontrado
                                                await captureDebugScreenshot(currentPage, `campo_email_nao_encontrado_acao_${i + 1}`, 4 - attempts);
                                            }
                                        } catch (autoLoginError) {
                                            console.log(`  Erro na estrat√©gia autom√°tica de login: ${autoLoginError.message}`);
                                            console.log('  Continuando com m√©todo tradicional...');
                                            // Screenshot do erro no login autom√°tico
                                            await captureDebugScreenshot(currentPage, `erro_auto_login_acao_${i + 1}`, 4 - attempts);
                                        }
                                    }
                                }

                                // Se o login autom√°tico funcionou, pular para verifica√ß√£o p√≥s-clique
                                if (clickSuccess) {
                                    console.log('  Pulando waitForSelector - login j√° executado');
                                } else {
                                    // M√©todo tradicional - aguardar o elemento
                                    // Screenshot antes de aguardar seletor
                                    await captureDebugScreenshot(currentPage, `pre_wait_selector_acao_${i + 1}`, 4 - attempts);

                                    await currentPage.waitForSelector(`xpath=${action.xpath}`, {
                                        timeout: 45000, // Aumentado para 45 segundos
                                        state: 'visible'
                                    });

                                    // Screenshot ap√≥s encontrar elemento
                                    await captureDebugScreenshot(currentPage, `pos_wait_selector_acao_${i + 1}`, 4 - attempts);
                                }

                                // Aguardar um pouco mais para garantir que o elemento √© clic√°vel
                                if (!clickSuccess) {
                                    await new Promise(resolve => setTimeout(resolve, 1000));

                                    // Screenshot antes do clique tradicional
                                    await captureDebugScreenshot(currentPage, `pre_traditional_click_acao_${i + 1}`, 4 - attempts);

                                    // Tentar clicar apenas se ainda n√£o foi clicado
                                    await currentPage.click(`xpath=${action.xpath}`, { timeout: 10000 });
                                    console.log('  Clique executado com sucesso');
                                    clickSuccess = true;

                                    // Screenshot ap√≥s clique tradicional
                                    await captureDebugScreenshot(currentPage, `pos_traditional_click_acao_${i + 1}`, 4 - attempts);
                                }

                                // Aguardar um pouco ap√≥s o clique para poss√≠vel carregamento
                                await new Promise(resolve => setTimeout(resolve, 2000));

                                // Screenshot final da tentativa
                                await captureDebugScreenshot(currentPage, `final_click_attempt_acao_${i + 1}`, 4 - attempts);

                                // Verificar se a p√°gina ainda est√° ativa ap√≥s o clique
                                if (currentPage.isClosed()) {
                                    console.log('  P√°gina foi fechada ap√≥s o clique, tentando encontrar p√°gina ativa...');
                                    const availablePages = context.pages().filter(p => !p.isClosed());
                                    if (availablePages.length > 0) {
                                        currentPage = availablePages[availablePages.length - 1]; // √öltima p√°gina ativa
                                        currentPage.setDefaultTimeout(0);
                                        currentPage.setDefaultNavigationTimeout(0);
                                        console.log('  Alternado para p√°gina ativa');

                                        // Screenshot da p√°gina ativa ap√≥s clique
                                        await captureDebugScreenshot(currentPage, `pagina_ativa_pos_click_acao_${i + 1}`, 4 - attempts);
                                    } else {
                                        throw new Error('Nenhuma p√°gina dispon√≠vel ap√≥s clique');
                                    }
                                }

                            } catch (clickError) {
                                attempts--;
                                console.log(`  Erro no clique (tentativas restantes: ${attempts}): ${clickError.message}`);

                                // Screenshot do erro
                                await captureDebugScreenshot(currentPage, `erro_click_acao_${i + 1}`, 4 - attempts);

                                if (attempts > 0) {
                                    console.log(`  Aguardando 3 segundos antes da pr√≥xima tentativa...`);
                                    await new Promise(resolve => setTimeout(resolve, 3000));

                                    // Tentar recarregar a p√°gina se necess√°rio
                                    try {
                                        await currentPage.reload({ waitUntil: 'networkidle' });
                                        console.log(`  P√°gina recarregada para nova tentativa`);
                                        await new Promise(resolve => setTimeout(resolve, 2000));

                                        // Screenshot ap√≥s reload
                                        await captureDebugScreenshot(currentPage, `pos_reload_acao_${i + 1}`, 4 - attempts);
                                    } catch (reloadError) {
                                        console.log(`  Erro ao recarregar p√°gina: ${reloadError.message}`);
                                    }
                                } else {
                                    // √öltima tentativa com m√©todo alternativo
                                    console.log(`  √öltima tentativa com m√©todo alternativo...`);

                                    // Screenshot antes da √∫ltima tentativa
                                    await captureDebugScreenshot(currentPage, `pre_last_attempt_acao_${i + 1}`);

                                    // Debug: listar todos os elementos div com data-email
                                    try {
                                        console.log('  Debug: Verificando estrutura da p√°gina...');

                                        // Verificar URL atual
                                        const currentUrl = currentPage.url();
                                        console.log(`  URL atual: ${currentUrl}`);

                                        // Verificar se estamos na p√°gina correta
                                        if (!currentUrl.includes('accounts.google.com')) {
                                            console.log('  AVISO: N√£o estamos na p√°gina do Google!');
                                        }

                                        // Detectar tipo de p√°gina do Google
                                        const isLoginPage = currentUrl.includes('signin/identifier') || currentUrl.includes('signin/v2/identifier');
                                        const isAccountSelectionPage = currentUrl.includes('selectaccount') || currentUrl.includes('oauth/selectaccount');

                                        if (isLoginPage) {
                                            console.log('  DETECTADO: P√°gina de LOGIN do Google (inserir email)');
                                            console.log('  Isso significa que n√£o h√° contas salvas ou precisamos inserir o email manualmente');

                                            // Verificar se h√° campo de email dispon√≠vel
                                            const emailInputs = await currentPage.locator('input[type="email"], #identifierId').count();
                                            console.log(`  Campos de email encontrados: ${emailInputs}`);

                                            if (emailInputs > 0) {
                                                console.log('  ESTRAT√âGIA: Inserir email no campo de input');
                                                // Esta √© uma p√°gina de login, n√£o de sele√ß√£o de conta
                                                // Precisamos inserir o email no campo de input
                                                throw new Error('P√ÅGINA_LOGIN_DETECTADA: N√£o √© p√°gina de sele√ß√£o de conta. Precisamos inserir o email no campo de input.');
                                            }
                                        } else if (isAccountSelectionPage) {
                                            console.log('  DETECTADO: P√°gina de SELE√á√ÉO DE CONTA do Google');
                                        } else {
                                            console.log('  DETECTADO: P√°gina do Google de tipo desconhecido');
                                        }

                                        // Procurar elementos com data-email
                                        const emailElements = await currentPage.locator('div[data-email]').all();
                                        console.log(`  Encontrados ${emailElements.length} elementos com data-email`);

                                        for (let i = 0; i < emailElements.length; i++) {
                                            const email = await emailElements[i].getAttribute('data-email');
                                            console.log(`    Elemento ${i + 1}: data-email="${email}"`);
                                        }

                                        // Tentar encontrar por texto tamb√©m
                                        const textElements = await currentPage.locator('text=albert.ferreira@itlean.com.br').all();
                                        console.log(`  Encontrados ${textElements.length} elementos com texto do email`);

                                        // Verificar se h√° elementos clic√°veis relacionados ao email
                                        const clickableElements = await currentPage.locator('div, button, a, span').all();
                                        console.log(`  Total de elementos clic√°veis: ${clickableElements.length}`);

                                        // Procurar por elementos que contenham o email
                                        let emailFound = false;
                                        for (let i = 0; i < Math.min(clickableElements.length, 50); i++) { // Limitar para n√£o sobrecarregar
                                            try {
                                                const text = await clickableElements[i].textContent();
                                                if (text && text.includes('albert.ferreira@itlean.com.br')) {
                                                    console.log(`  Elemento com email encontrado: "${text}"`);
                                                    emailFound = true;
                                                }
                                            } catch (textError) {
                                                // Ignorar elementos que n√£o t√™m texto
                                            }
                                        }

                                        if (!emailFound) {
                                            console.log('  Email n√£o encontrado nos elementos da p√°gina');                                        // Capturar screenshot para debug
                                            try {
                                                await captureDebugScreenshot(currentPage, `debug_estrutura_pagina_acao_${i + 1}`);
                                            } catch (screenshotError) {
                                                console.log(`  Erro ao capturar screenshot: ${screenshotError.message}`);
                                            }
                                        }

                                    } catch (debugError) {
                                        console.log(`  Erro no debug: ${debugError.message}`);
                                    }

                                    try {
                                        // Tentar diferentes estrat√©gias de sele√ß√£o
                                        let element = null;

                                        // Verificar primeiro se estamos numa p√°gina de login
                                        const currentUrl = currentPage.url();
                                        const isLoginPage = currentUrl.includes('signin/identifier') || currentUrl.includes('signin/v2/identifier');

                                        if (isLoginPage) {
                                            console.log('  DETECTADO: P√°gina de login - tentando inserir email no campo de input');

                                            // Esta √© uma p√°gina de login, n√£o de sele√ß√£o
                                            // Vamos tentar inserir o email no campo de input
                                            try {
                                                const emailInput = await currentPage.locator('input[type="email"], #identifierId').first();
                                                if (await emailInput.count() > 0) {
                                                    console.log('  Preenchendo campo de email...');
                                                    await emailInput.fill('albert.ferreira@itlean.com.br');

                                                    // Aguardar um pouco
                                                    await new Promise(resolve => setTimeout(resolve, 1000));

                                                    // Procurar bot√£o "Pr√≥ximo" ou "Continuar"
                                                    const nextButton = await currentPage.locator('button:has-text("Pr√≥ximo"), button:has-text("Next"), button:has-text("Continuar"), button[id*="next"], button[id*="Next"], [jsname="LgbsSe"], button[type="submit"], #identifierNext, [data-primary="true"]').first();
                                                    if (await nextButton.count() > 0) {
                                                        console.log('  Clicando no bot√£o Pr√≥ximo...');
                                                        await nextButton.click();
                                                        clickSuccess = true;

                                                        // Aguardar navega√ß√£o
                                                        await new Promise(resolve => setTimeout(resolve, 3000));

                                                        // Verificar se chegamos na p√°gina de sele√ß√£o de conta ou senha
                                                        const newUrl = currentPage.url();
                                                        console.log(`  Nova URL ap√≥s inserir email: ${newUrl}`);

                                                        if (currentPage.isClosed()) {
                                                            console.log('  P√°gina foi fechada ap√≥s inserir email, procurando p√°gina ativa...');
                                                            const availablePages = context.pages().filter(p => !p.isClosed());
                                                            if (availablePages.length > 0) {
                                                                currentPage = availablePages[availablePages.length - 1];
                                                                currentPage.setDefaultTimeout(0);
                                                                currentPage.setDefaultNavigationTimeout(0);
                                                                console.log('  Alternado para p√°gina ativa');
                                                            }
                                                        }
                                                    } else {
                                                        console.log('  Bot√£o Pr√≥ximo n√£o encontrado, tentando outras estrat√©gias...');
                                                    }
                                                } else {
                                                    console.log('  Campo de email n√£o encontrado');
                                                }
                                            } catch (loginError) {
                                                console.log(`  Erro ao tentar inserir email: ${loginError.message}`);
                                            }
                                        }

                                        // Se ainda n√£o teve sucesso, tentar as estrat√©gias originais
                                        if (!clickSuccess) {
                                            // Estrat√©gia 1: XPath original
                                            try {
                                                element = await currentPage.locator(`xpath=${action.xpath}`).first();
                                                if (await element.count() > 0) {
                                                    console.log('  Elemento encontrado com XPath original');
                                                } else {
                                                    element = null;
                                                }
                                            } catch (xpathError) {
                                                console.log('  XPath original falhou');
                                                element = null;
                                            }

                                            // Estrat√©gia 2: Seletor por data-email
                                            if (!element) {
                                                try {
                                                    element = await currentPage.locator('div[data-email="albert.ferreira@itlean.com.br"]').first();
                                                    if (await element.count() > 0) {
                                                        console.log('  Elemento encontrado com seletor data-email');
                                                    } else {
                                                        element = null;
                                                    }
                                                } catch (dataEmailError) {
                                                    console.log('  Seletor data-email falhou');
                                                    element = null;
                                                }
                                            }

                                            // Estrat√©gia 3: Seletor por texto
                                            if (!element) {
                                                try {
                                                    element = await currentPage.locator('text=albert.ferreira@itlean.com.br').first();
                                                    if (await element.count() > 0) {
                                                        console.log('  Elemento encontrado com seletor de texto');
                                                    } else {
                                                        element = null;
                                                    }
                                                } catch (textSelectorError) {
                                                    console.log('  Seletor de texto falhou');
                                                    element = null;
                                                }
                                            }

                                            // Estrat√©gia 4: Procurar qualquer div que contenha o email
                                            if (!element) {
                                                try {
                                                    const divs = await currentPage.locator('div').all();
                                                    for (const div of divs) {
                                                        try {
                                                            const text = await div.textContent();
                                                            if (text && text.includes('albert.ferreira@itlean.com.br')) {
                                                                element = div;
                                                                console.log('  Elemento encontrado por busca em divs');
                                                                break;
                                                            }
                                                        } catch (divError) {
                                                            // Continuar procurando
                                                        }
                                                    }
                                                } catch (divSearchError) {
                                                    console.log('  Busca em divs falhou');
                                                }
                                            }

                                            if (element && await element.count() > 0) {
                                                await element.click();
                                                console.log('  Clique executado (m√©todo alternativo)');
                                                clickSuccess = true;
                                            } else if (!clickSuccess) {
                                                throw new Error(`Elemento n√£o encontrado com nenhuma estrat√©gia: ${action.xpath}`);
                                            }
                                        }

                                        // Verifica√ß√£o p√≥s-clique (apenas se houve clique)
                                        if (clickSuccess) {
                                            await new Promise(resolve => setTimeout(resolve, 2000));
                                            if (currentPage.isClosed()) {
                                                console.log('  P√°gina foi fechada ap√≥s o clique, tentando encontrar p√°gina ativa...');
                                                const availablePages = context.pages().filter(p => !p.isClosed());
                                                if (availablePages.length > 0) {
                                                    currentPage = availablePages[availablePages.length - 1];
                                                    currentPage.setDefaultTimeout(0);
                                                    currentPage.setDefaultNavigationTimeout(0);
                                                    console.log('  Alternado para p√°gina ativa');
                                                } else {
                                                    throw new Error('Nenhuma p√°gina dispon√≠vel ap√≥s clique');
                                                }
                                            }
                                        }
                                    } catch (alternativeError) {
                                        throw new Error(`Elemento n√£o encontrado: ${action.xpath}`);
                                    }
                                }
                            }
                        }

                        if (!clickSuccess) {
                            throw new Error(`Falha ao clicar no elemento ap√≥s 3 tentativas: ${action.xpath}`);
                        }
                        break;
                    }

                    case 'type':
                        console.log(`  Digitando no campo: ${action.xpath}`);
                        console.log(`  Valor definido`);

                        // Screenshot antes de digitar
                        await captureDebugScreenshot(currentPage, `pre_type_acao_${i + 1}`);

                        try {
                            await currentPage.fill(`xpath=${action.xpath}`, action.value || '', { timeout: 10000 });
                            console.log('  Texto digitado');
                        } catch (typeError) {
                            console.log(`  Tentando localizar campo primeiro...`);
                            const element = await currentPage.locator(`xpath=${action.xpath}`).first();
                            if (await element.count() === 0) {
                                // Screenshot quando elemento n√£o √© encontrado
                                await captureDebugScreenshot(currentPage, `elemento_nao_encontrado_type_acao_${i + 1}`);
                                throw new Error(`Campo n√£o encontrado: ${action.xpath}`);
                            }
                            await element.fill(action.value || '');
                            console.log('  Texto digitado (segunda tentativa)');
                        }

                        // Screenshot ap√≥s digitar
                        await captureDebugScreenshot(currentPage, `pos_type_acao_${i + 1}`);
                        break;

                    case 'wait':
                        console.log(`  Aguardando ${action.seconds || 1} segundos...`);

                        // Screenshot antes da espera
                        await captureDebugScreenshot(currentPage, `pre_wait_acao_${i + 1}`);

                        // Verifica√ß√£o adicional antes do wait
                        if (currentPage.isClosed()) {
                            throw new Error('P√°gina foi fechada antes da opera√ß√£o de espera');
                        }
                        await waitForSeconds(currentPage, action.seconds || 1);
                        // Verifica√ß√£o p√≥s-wait
                        if (currentPage.isClosed()) {
                            console.log('  Aviso: P√°gina foi fechada durante a espera');
                            // Tentar usar uma p√°gina dispon√≠vel
                            const availablePages = context.pages().filter(p => !p.isClosed());
                            if (availablePages.length > 0) {
                                currentPage = availablePages[0];
                                currentPage.setDefaultTimeout(0);
                                currentPage.setDefaultNavigationTimeout(0);
                                console.log('  Alternado para p√°gina dispon√≠vel');
                            } else {
                                throw new Error('Nenhuma p√°gina dispon√≠vel ap√≥s espera');
                            }
                        }
                        console.log('  Espera conclu√≠da');

                        // Screenshot ap√≥s a espera
                        await captureDebugScreenshot(currentPage, `pos_wait_acao_${i + 1}`);
                        break;

                    case 'switchToPopup': {
                        console.log('  Alternando para popup/nova aba...');

                        // Screenshot antes de tentar trocar para popup
                        await captureDebugScreenshot(currentPage, `pre_switch_popup_acao_${i + 1}`);

                        // Verificar se j√° temos um popup detectado da a√ß√£o anterior
                        let detectedPopup = null;
                        if (i > 0) {
                            // Tentar encontrar popup detectado na a√ß√£o anterior
                            const currentPages = context.pages();
                            const initialPageCount = currentPages.length;

                            // Procurar por p√°ginas do Google criadas recentemente
                            for (const page of currentPages) {
                                const url = page.url();
                                if (url.includes('accounts.google.com') || url.includes('google.com')) {
                                    if (page !== currentPage) { // N√£o √© a p√°gina atual
                                        console.log(`  Popup j√° detectado: ${url}`);
                                        detectedPopup = page;
                                        break;
                                    }
                                }
                            }
                        }

                        if (detectedPopup) {
                            console.log('  Usando popup j√° detectado!');
                            try {
                                await detectedPopup.waitForLoadState('domcontentloaded', { timeout: 15000 });
                                detectedPopup.setDefaultTimeout(0);
                                detectedPopup.setDefaultNavigationTimeout(0);
                                currentPage = detectedPopup;
                                console.log('  Alternado para popup detectado com sucesso');

                                // Screenshot do popup detectado
                                await captureDebugScreenshot(currentPage, `popup_detectado_acao_${i + 1}`);

                                // Aguardar carregamento adicional espec√≠fico para Google
                                console.log('  Aguardando carregamento completo da p√°gina do Google...');
                                await new Promise(resolve => setTimeout(resolve, 5000));

                                // Screenshot ap√≥s aguardar carregamento
                                await captureDebugScreenshot(currentPage, `popup_carregado_acao_${i + 1}`);

                                // Verificar se a p√°gina est√° realmente carregada
                                try {
                                    await currentPage.waitForLoadState('networkidle', { timeout: 15000 });
                                    console.log('  Rede estabilizada no popup');
                                } catch (networkError) {
                                    console.log('  Timeout na rede, mas continuando...');
                                }

                                // Screenshot final do popup
                                await captureDebugScreenshot(currentPage, `popup_final_acao_${i + 1}`);

                                break;
                            } catch (error) {
                                console.log(`  Erro ao usar popup detectado: ${error.message}`);
                                // Screenshot do erro
                                await captureDebugScreenshot(currentPage, `erro_popup_detectado_acao_${i + 1}`);
                                // Continuar com m√©todo normal
                            }
                        }

                        // Configurar listener para capturar novas p√°ginas antes de tentar detect√°-las
                        let newPagePromise = null;
                        const pageCreatedHandler = (page) => {
                            console.log(`  Nova p√°gina criada com URL: ${page.url()}`);
                            if (!newPagePromise) {
                                newPagePromise = page;
                            }
                        };
                        context.on('page', pageCreatedHandler);

                        // Contar p√°ginas antes da a√ß√£o
                        const initialPageCount = context.pages().length;
                        console.log(`  P√°ginas iniciais: ${initialPageCount}`);

                        let popupFound = false;
                        let waitTime = 0;
                        const maxWaitTime = 60000; // Reduzir para 1 minuto
                        const checkInterval = 1000; // Verificar a cada 1 segundo

                        // Aguardar um tempo inicial para o popup aparecer
                        await new Promise(resolve => setTimeout(resolve, 3000));

                        while (waitTime < maxWaitTime && !popupFound) {
                            console.log(`  Aguardando popup... (${waitTime / 1000}s/${maxWaitTime / 1000}s)`);

                            await new Promise(resolve => setTimeout(resolve, checkInterval));
                            waitTime += checkInterval;

                            // Verificar se novas p√°ginas foram criadas via listener
                            if (newPagePromise) {
                                console.log('  Nova p√°gina detectada via listener!');
                                const newPage = newPagePromise;

                                try {
                                    // Aguardar a nova p√°gina come√ßar a carregar
                                    await new Promise(resolve => setTimeout(resolve, 2000));

                                    // Verificar se a p√°gina tem conte√∫do relevante
                                    const url = newPage.url();
                                    console.log(`  URL da nova p√°gina: ${url}`);

                                    if (url.includes('accounts.google.com') || url.includes('google.com') || url !== 'about:blank') {
                                        console.log('  P√°gina v√°lida detectada!');

                                        // Aguardar que a nova aba carregue
                                        try {
                                            await newPage.waitForLoadState('domcontentloaded', { timeout: 15000 });
                                            console.log('  DOM carregado');
                                        } catch (loadError) {
                                            console.log('  Continuando sem aguardar DOM...');
                                        }

                                        // Configurar timeouts
                                        newPage.setDefaultTimeout(0);
                                        newPage.setDefaultNavigationTimeout(0);

                                        currentPage = newPage;
                                        console.log('  Alternado para popup com sucesso');
                                        popupFound = true;
                                    } else {
                                        console.log('  P√°gina n√£o √© v√°lida, continuando aguardando...');
                                        newPagePromise = null; // Reset para aguardar pr√≥xima p√°gina
                                    }
                                } catch (error) {
                                    console.log(`  Erro ao processar nova p√°gina: ${error.message}`);
                                    newPagePromise = null; // Reset em caso de erro
                                }
                            }

                            // Verificar se novas p√°ginas foram criadas (m√©todo alternativo)
                            if (!popupFound) {
                                const currentPages = context.pages();
                                console.log(`  P√°ginas atuais: ${currentPages.length}`);

                                if (currentPages.length > initialPageCount) {
                                    console.log('  Nova p√°gina detectada via contagem!');

                                    // Pegar a p√°gina mais recente que n√£o seja about:blank
                                    const validPages = currentPages.filter(p => p.url() !== 'about:blank');
                                    if (validPages.length > 0) {
                                        const newPage = validPages[validPages.length - 1];
                                        const url = newPage.url();
                                        console.log(`  Tentando p√°gina: ${url}`);

                                        if (url.includes('accounts.google.com') || url.includes('google.com')) {
                                            try {
                                                await newPage.waitForLoadState('domcontentloaded', { timeout: 10000 });
                                                newPage.setDefaultTimeout(0);
                                                newPage.setDefaultNavigationTimeout(0);
                                                currentPage = newPage;
                                                console.log('  Alternado para popup (m√©todo alternativo)');
                                                popupFound = true;
                                            } catch (error) {
                                                console.log(`  Erro no m√©todo alternativo: ${error.message}`);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // Remover listener
                        context.off('page', pageCreatedHandler);

                        if (!popupFound) {
                            console.log('  Timeout aguardando popup, tentando estrat√©gias alternativas...');

                            // Estrat√©gia 1: Verificar se o popup j√° existe na p√°gina atual
                            try {
                                console.log('  Verificando se popup est√° na mesma p√°gina...');
                                const currentUrl = currentPage.url();
                                console.log(`  URL atual: ${currentUrl}`);

                                if (currentUrl.includes('accounts.google.com') || currentUrl.includes('google.com')) {
                                    console.log('  Detectado que j√° estamos na p√°gina do Google - popup pode ter sido redirecionamento');
                                    popupFound = true;
                                } else {
                                    // Verificar se existe algum iframe com conte√∫do do Google
                                    const frames = currentPage.frames();
                                    console.log(`  Verificando ${frames.length} frames...`);

                                    for (const frame of frames) {
                                        try {
                                            const frameUrl = frame.url();
                                            console.log(`  Frame URL: ${frameUrl}`);
                                            if (frameUrl.includes('accounts.google.com') || frameUrl.includes('google.com')) {
                                                console.log('  Encontrado frame do Google!');
                                                popupFound = true;
                                                break;
                                            }
                                        } catch (frameError) {
                                            console.log(`  Erro ao verificar frame: ${frameError.message}`);
                                        }
                                    }
                                }
                            } catch (strategyError) {
                                console.log(`  Erro na estrat√©gia alternativa: ${strategyError.message}`);
                            }

                            // Estrat√©gia 2: Se ainda n√£o encontrou, tentar qualquer nova p√°gina
                            if (!popupFound) {
                                const pages = context.pages();
                                if (pages.length > initialPageCount) {
                                    // Tentar a √∫ltima p√°gina criada
                                    currentPage = pages[pages.length - 1];
                                    currentPage.setDefaultTimeout(0);
                                    currentPage.setDefaultNavigationTimeout(0);
                                    console.log(`  Alternado para √∫ltima p√°gina dispon√≠vel: ${currentPage.url()}`);
                                    popupFound = true;
                                } else {
                                    // Estrat√©gia 3: Assumir que o popup pode estar bloqueado e continuar na mesma p√°gina
                                    console.log('  Popup pode estar bloqueado, continuando na p√°gina atual...');
                                    console.log('  AVISO: Popup n√£o detectado - pode ser necess√°rio ajustar as pr√≥ximas a√ß√µes');
                                    popupFound = true; // Continuar execu√ß√£o
                                }
                            }
                        }

                        // Log final do estado
                        console.log(`  P√°gina atual final: ${currentPage.url()}`);

                        // Aguardar mais tempo para a p√°gina estabilizar, especialmente p√°ginas do Google
                        const finalUrl = currentPage.url();
                        if (finalUrl.includes('accounts.google.com')) {
                            console.log('  Detectado Google - aguardando estabiliza√ß√£o adicional...');
                            await new Promise(resolve => setTimeout(resolve, 8000)); // 8 segundos para Google

                            // Aguardar especificamente por elementos do Google
                            try {
                                await waitForGoogleAccountSelection(currentPage);
                            } catch (googleWaitError) {
                                console.log(`  Erro ao aguardar Google: ${googleWaitError.message}`);
                            }
                        } else {
                            await new Promise(resolve => setTimeout(resolve, 3000)); // 3 segundos para outras p√°ginas
                        }

                        // Screenshot final ap√≥s estabiliza√ß√£o
                        await captureDebugScreenshot(currentPage, `popup_estabilizado_acao_${i + 1}`);
                        break;
                    }

                    case 'switchToMain':
                        console.log('  Voltando para aba principal...');
                        if (originalPage.isClosed()) {
                            throw new Error('P√°gina principal foi fechada');
                        }
                        currentPage = originalPage;
                        console.log('  Voltou para aba principal');
                        break;

                    case 'loopUntil': {
                        console.log(`  Iniciando loop at√© condi√ß√£o: ${action.xpath}`);
                        const today = getTodayDate();
                        console.log(`  Data de hoje: ${today}`);
                        let attempts = 10;
                        let loopCount = 0;

                        while (attempts-- > 0) {
                            loopCount++;
                            console.log(`    Tentativa ${loopCount}/10`);

                            try {
                                // Verificar se o elemento existe
                                const element = await currentPage.locator(`xpath=${action.xpath}`).first();
                                if (await element.count() === 0) {
                                    throw new Error(`Elemento n√£o encontrado: ${action.xpath}`);
                                }

                                const inputValue = await element.getAttribute('value');
                                console.log(`    Valor atual do campo: ${inputValue}`);

                                if (inputValue && inputValue >= today) {
                                    console.log('    Condi√ß√£o atendida, saindo do loop');
                                    break;
                                }

                                console.log(`    Executando ${action.actionsIfTrue.length} sub-a√ß√µes...`);
                                for (let j = 0; j < action.actionsIfTrue.length; j++) {
                                    const subAction = action.actionsIfTrue[j];
                                    console.log(`      Sub-a√ß√£o ${j + 1}: ${subAction.type}`);

                                    try {
                                        if (subAction.type === 'click') {
                                            console.log(`        Clicando: ${subAction.xpath}`);
                                            await currentPage.click(`xpath=${subAction.xpath}`, { timeout: 10000 });
                                        } else if (subAction.type === 'type') {
                                            console.log(`        Digitando: ${subAction.value}`);
                                            await currentPage.fill(`xpath=${subAction.xpath}`, subAction.value || '', { timeout: 10000 });
                                        } else if (subAction.type === 'wait') {
                                            console.log(`        Aguardando ${subAction.seconds} segundos`);
                                            // Garantir que temos uma p√°gina ativa antes do wait
                                            currentPage = await ensureActivePage(context, currentPage);
                                            await waitForSeconds(currentPage, subAction.seconds || 1);
                                        }
                                        console.log(`        Sub-a√ß√£o ${j + 1} conclu√≠da`);
                                    } catch (subError) {
                                        console.log(`        Erro na sub-a√ß√£o ${j + 1}: ${subError.message}`);
                                        throw subError;
                                    }
                                }

                                console.log('    Aguardando 3 segundos antes da pr√≥xima tentativa...');
                                currentPage = await ensureActivePage(context, currentPage);
                                await waitForSeconds(currentPage, 3);
                            } catch (loopError) {
                                console.log(`    Erro na tentativa ${loopCount}: ${loopError.message}`);
                                if (attempts === 0) {
                                    throw new Error(`Loop falhou ap√≥s ${loopCount} tentativas: ${loopError.message}`);
                                }
                            }
                        }

                        if (attempts <= 0) {
                            console.log('    Limite de tentativas atingido');
                        }
                        console.log('  Loop conclu√≠do');
                        break;
                    }

                    case 'screenshot':
                        console.log(`  Capturando screenshot: ${action.path || 'screenshot.png'}`);
                        await currentPage.screenshot({ path: action.path || 'screenshot.png' });
                        console.log('  Screenshot capturado');
                        break;

                    case 'extractText':
                        console.log(`  Extraindo texto do elemento: ${action.xpath}`);
                        action.result = await currentPage.textContent(`xpath=${action.xpath}`);
                        console.log(`  Texto extra√≠do: ${action.result}`);
                        break;

                    default:
                        console.log(`  Tipo de a√ß√£o n√£o reconhecido: ${action.type}`);
                        break;
                }

                // Limpar listener se foi configurado
                if (popupListener) {
                    context.off('page', popupListener);
                    if (pendingPopup) {
                        console.log('  Popup foi detectado antecipadamente para pr√≥xima a√ß√£o');
                    }
                }

            } catch (actionError) {
                console.error(`\nERRO na a√ß√£o ${i + 1} (${action.type}):`);
                console.error(`XPath/Elemento: ${action.xpath || 'N/A'}`);
                console.error(`Detalhes: ${actionError.message}`);
                console.error(`Timestamp: ${new Date().toLocaleString('pt-BR')}`);

                // Screenshot do erro
                try {
                    await captureDebugScreenshot(currentPage, `erro_acao_${i + 1}_${action.type}`);
                } catch (screenshotError) {
                    console.log(`  Erro ao capturar screenshot do erro: ${screenshotError.message}`);
                }

                // Capturar informa√ß√µes adicionais do estado da p√°gina
                try {
                    if (!currentPage.isClosed()) {
                        const url = currentPage.url();
                        console.error(`URL atual: ${url}`);
                        const title = await currentPage.title();
                        console.error(`T√≠tulo da p√°gina: ${title}`);

                        // Capturar screenshot para debug
                        try {
                            const screenshotPath = `/app/debug_error_${i + 1}_${Date.now()}.png`;
                            await currentPage.screenshot({ path: screenshotPath });
                            console.error(`Screenshot de debug salvo em: ${screenshotPath}`);
                        } catch (screenshotError) {
                            console.error('Erro ao capturar screenshot de debug:', screenshotError.message);
                        }
                    } else {
                        console.error('P√°gina atual est√° fechada');
                    }
                } catch (debugError) {
                    console.error('Erro ao capturar informa√ß√µes de debug:', debugError.message);
                }

                throw new Error(`Falha na a√ß√£o ${i + 1} (${action.type}): ${actionError.message}`);
            }
        }

        console.log('\nTodas as a√ß√µes executadas com sucesso!');
        console.log('Capturando conte√∫do final da p√°gina...');

        // Garantir que temos uma p√°gina ativa para capturar o conte√∫do
        currentPage = await ensureActivePage(context, currentPage);

        // Screenshot final de sucesso
        await captureDebugScreenshot(currentPage, 'final_sucesso');

        const finalHtml = await currentPage.content();
        console.log('Conte√∫do capturado');

        console.log('Fechando navegador...');
        await browser.close();
        console.log('Navegador fechado');

        return {
            success: true,
            message: 'Execu√ß√£o conclu√≠da com sucesso.',
            html: finalHtml
        };

    } catch (err) {
        console.error('\nErro durante a execu√ß√£o:');
        console.error('Detalhes do erro:', err.message);
        console.log('Fechando navegador devido ao erro...');

        try {
            if (browser) {
                await browser.close();
                console.log('Navegador fechado');
            }
        } catch (closeError) {
            console.log('Erro ao fechar navegador:', closeError.message);
        }

        throw err;
    }
};
